{
	"Junit Test Method": {
		"prefix": "tt",
		"body": [
			"@Test",
			"public void $1_test() throws Exception {",
			"    // given",
			"    $2",
			"",
			"    // when",
			"",
			"",
			"    // then",
			"",
			"}"
		],
		"description": "Junit Test Method"
	},
	"Log": {
		"prefix": "logd",
		"body": [
			"log.debug(\"디버그 : $1\"$2);"
		],
		"description": "logd"
	},
	"Sysout": {
		"prefix": "syst",
		"body": [
			"System.out.println(\"테스트 : $1\"$2);"
		],
		"description": "sysout"
	},
	"ReturnMapping": {
		"prefix": "rr",
		"body": [
			"return new ResponseEntity<>(new ResponseDto<>(1, \"\", null), HttpStatus.OK);",
		],
		"description": "ResponseMapping"
	},
	"ErrorMapping": {
		"prefix": "err",
		"body": [
			"return new ResponseEntity<>(new ResponseDto<>(-1, \"\", null), HttpStatus.BAD_REQUEST);",
		],
		"description": "ResponseMapping"
	},
	"GetMapping": {
		"prefix": "getm",
		"body": [
			"@GetMapping(\"/$1\")",
			"public ResponseEntity<?> $2(){",
			"    $3",
			"return new ResponseEntity<>(new ResponseDto<>(1, \"\", null), HttpStatus.OK);",
			"}",
		],
		"description": "Mapping"
	},
	"PostMapping": {
		"prefix": "postm",
		"body": [
			"@PostMapping(\"/$1\")",
			"public ResponseEntity<?> $2(){",
			"    $3",
			"    return new ResponseEntity<>(new ResponseDto<>(1, \"\", null), HttpStatus.CREATED);",
			"}",
		],
		"description": "Mapping"
	},
	"PutMapping": {
		"prefix": "putm",
		"body": [
			"@PutMapping(\"/$1\")",
			"public ResponseEntity<?> $2(){",
			"    $3",
			"    return new ResponseEntity<>(new ResponseDto<>(1, \"\", null), HttpStatus.OK);",
			"}",
		],
		"description": "Mapping"
	},
	"DeleteMapping": {
		"prefix": "delm",
		"body": [
			"@DeleteMapping(\"/$1\")",
			"public ResponseEntity<?> $2(){",
			"    $3",
			"    return new ResponseEntity<>(new ResponseDto<>(1, \"\", null), HttpStatus.OK);",
			"}",
		],
		"description": "Mapping"
	},
	"Logger": {
		"prefix": "logf",
		"body": [
			"private final Logger log = LoggerFactory.getLogger(getClass());"
		],
		"description": "Logger Field"
	},
	"MapToList": {
		"prefix": "mapToList",
		"body": [
			"$1.stream().map((e)->e).collect(Collectors.toList());"
		],
		"description": "MapToList"
	},
	"AssertThatEquals": {
		"prefix": "asse",
		"body": [
			"assertThat($1).isEqualTo($2);"
		],
		"description": "AssertThatEquals"
	},
	"Java File Header": {
		"prefix": "project_fileheader",
		"body": [
			"/**",
			" * ------------------------------------------------------------",
			" *  파일명  : ${TM_FILENAME}",
			" *  설명 : ${1:클래스 설명을 입력하세요}",
			" *  작성자  : ${2:작성자 이름}",
			" *  작성일  : ${CURRENT_YEAR}-${CURRENT_MONTH}-${CURRENT_DATE}",
			" *  수정이력   :",
			" *   - ${CURRENT_YEAR}-${CURRENT_MONTH}-${CURRENT_DATE} ${2:작성자 이름} 최초 생성",
			" * ------------------------------------------------------------",
			" */"
		],
		"description": "Java 파일 상단에 파일 주석을 삽입합니다."
	},
		"Algorithm": {
		"prefix": "algorithm_fileheader",
		"body": [
			"/**",
			" * ------------------------------------------------------------",
			" *  파일명  : ${TM_FILENAME}",
			" *  작성일  : ${CURRENT_YEAR}-${CURRENT_MONTH}-${CURRENT_DATE}",
			" *  설명 : ${1:클래스 설명을 입력하세요}",
			" *  입력 : ${2:입력에 관한 설명을 하세요}",
			" *  출력 : ${3:출력에 관한 설명을 하세요}",
			" * ------------------------------------------------------------",
			" */"
		],
		"description": "Java 파일 상단에 알고리즘 설명 주석을 삽입합니다."
	}
}